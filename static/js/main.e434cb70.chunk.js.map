{"version":3,"sources":["components/card/index.js","components/card-list/index.js","components/search/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monsterImage","monsterName","monsterEmail","CardList","monsters","map","item","key","id","email","name","Search","setSearch","search","placeholder","type","onChange","e","target","value","fetchUsers","stateSetter","a","axios","get","users","data","console","log","App","useState","setMonsters","useEffect","filteredMonsters","filter","monster","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0WAaeA,G,YAVF,SAACC,GACZ,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAI,UAAUC,IAAKH,EAAMI,eAC9B,4BAAKJ,EAAMK,aACX,2BAAIL,EAAMM,iBCaDC,G,MAjBE,SAACP,GAChB,OACE,yBAAKC,UAAU,aACZD,EAAMQ,SACHR,EAAMQ,SAASC,KAAI,SAACC,GAAD,OACjB,kBAAC,EAAD,CACEC,IAAKD,EAAKE,GACVN,aAAcI,EAAKG,MACnBT,aAAY,+BAA0BM,EAAKE,GAA/B,0BACZP,YAAaK,EAAKI,UAGtB,QCCKC,G,MAdA,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,YACnC,OACE,6BACE,2BACEjB,UAAU,SACVkB,KAAK,SACLD,YAAaA,EACbE,SAAU,SAACC,GAAD,OAAOL,EAAUK,EAAEC,OAAOC,QACpCA,MAAON,OCJTO,EAAU,uCAAG,WAAOC,GAAP,eAAAC,EAAA,+EAEKC,IAAMC,IAAI,6CAFf,OAETC,EAFS,OAGfJ,EAAYI,EAAMC,MAHH,gDAKfC,QAAQC,IAAR,MALe,yDAAH,sDA+BDC,MAtBf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACN1B,EADM,KACI2B,EADJ,OAEeD,mBAAS,IAFxB,mBAENjB,EAFM,KAEED,EAFF,KAGboB,qBAAU,WACRZ,EAAWW,KACV,IACH,IAAME,EAAmB7B,EAAS8B,QAAO,SAACC,GAAD,OACvCA,EAAQzB,KAAK0B,cAAcC,SAASxB,MAEtC,OACE,yBAAKhB,UAAU,OACb,gDACA,kBAAC,EAAD,CACEiB,YAAY,kBACZD,OAAQA,EACRD,UAAWA,IAEb,kBAAC,EAAD,CAAUR,SAAU6B,MCrBNK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.e434cb70.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.style.css\";\n\nconst Card = (props) => {\n  return (\n    <div className=\"card-container\">\n      <img alt=\"monster\" src={props.monsterImage} />\n      <h2>{props.monsterName}</h2>\n      <p>{props.monsterEmail}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../card\";\nimport \"./index.style.css\";\n\nconst CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters\n        ? props.monsters.map((item) => (\n            <Card\n              key={item.id}\n              monsterEmail={item.email}\n              monsterImage={`https://robohash.org/${item.id}?set=set2&size=180x180`}\n              monsterName={item.name}\n            />\n          ))\n        : null}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nimport \"./index.style.css\";\n\nconst Search = ({ setSearch, search, placeholder }) => {\n  return (\n    <div>\n      <input\n        className=\"search\"\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={(e) => setSearch(e.target.value)}\n        value={search}\n      />\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nimport CardList from \"./components/card-list\";\nimport Search from \"./components/search\";\n\nconst fetchUsers = async (stateSetter) => {\n  try {\n    const users = await axios.get(\"http://jsonplaceholder.typicode.com/users\");\n    stateSetter(users.data);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nfunction App() {\n  const [monsters, setMonsters] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  useEffect(() => {\n    fetchUsers(setMonsters);\n  }, []);\n  const filteredMonsters = monsters.filter((monster) =>\n    monster.name.toLowerCase().includes(search)\n  );\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <Search\n        placeholder=\"search monsters\"\n        search={search}\n        setSearch={setSearch}\n      />\n      <CardList monsters={filteredMonsters}></CardList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}